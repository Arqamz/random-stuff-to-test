name: Parse POC Request Issue

on:
  issues:
    types: [opened, edited]

jobs:
  parse_issue:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'Generate API Portal') || contains(github.event.issue.labels.*.name, 'POC Request')
    steps:
      - name: Display Issue Information
        run: |
          echo "Issue Title: ${{ github.event.issue.title }}"
          echo "Issue Body: ${{ github.event.issue.body }}"

      - name: Parse POC Request Fields
        id: parse_fields
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"

          # Remove markdown formatting symbols
          CLEAN_BODY=$(echo "$ISSUE_BODY" | sed 's/\*\*//g' | sed 's/_No response_//g')
          echo "Cleaned Body:"
          echo "$CLEAN_BODY"
          echo "--------------------"

          # Extract each field using grep and sed based on headings
          echo "Extracting Customer Name..."
          CUSTOMER_NAME=$(echo "$CLEAN_BODY" | sed -n '/^### Customer Name \*/{n;n;p;}' | xargs)
          echo "Customer Name: $CUSTOMER_NAME"
          echo "--------------------"

          echo "Extracting Company Website Base URL..."
          COMPANY_URL=$(echo "$CLEAN_BODY" | sed -n '/^### Company Website Base URL \*/{n;n;p;}' | xargs)
          echo "Company Website Base URL: $COMPANY_URL"
          echo "--------------------"

          echo "Extracting Specification Folder Zip URL..."
          SPEC_FOLDER_URL=$(echo "$CLEAN_BODY" | sed -n '/^### Specification Folder Details \*/{n;n;p;}' | grep -oE '\(https://[^)]*\)|https://[^ ]*' | sed 's/[()]//g')
          echo "Specification Folder URL: $SPEC_FOLDER_URL"
          echo "--------------------"
          
          echo "Extracting Favicon Image..."
          FAVICON_IMAGE=$(echo "$CLEAN_BODY" | sed -n '/^### Favicon Image (Optional)/{n;n;p;}' | xargs)
          echo "Favicon Image: $FAVICON_IMAGE"
          echo "--------------------"

          echo "Extracting Primary Color Hex Code..."
          PRIMARY_COLOR=$(echo "$CLEAN_BODY" | sed -n '/^### Primary Color Hex Code (Optional)/{n;n;p;}' | xargs)
          echo "Primary Color Hex Code: ${PRIMARY_COLOR:-#0c7ff2}"
          echo "--------------------"

          echo "Extracting Secondary Color Hex Code..."
          SECONDARY_COLOR=$(echo "$CLEAN_BODY" | sed -n '/^### Secondary Color Hex Code (Optional)/{n;n;p;}' | xargs)
          echo "Secondary Color Hex Code: ${SECONDARY_COLOR:-$PRIMARY_COLOR}"
          echo "--------------------"

          echo "Extracting Link Color Hex Code..."
          LINK_COLOR=$(echo "$CLEAN_BODY" | sed -n '/^### Link Color Hex Code (Optional)/{n;n;p;}' | xargs)
          echo "Link Color Hex Code: ${LINK_COLOR:-#00C7D4}"
          echo "--------------------"

          # Output parsed values
          echo "Final Parsed Values:"
          echo "Customer Name: $CUSTOMER_NAME"
          echo "Company Website Base URL: $COMPANY_URL"
          
          # Check if SPEC_FOLDER_URL is not empty
          if [ -z "$SPEC_FOLDER_URL" ]; then
            echo "No Specification Folder Zip URL found."
            exit 1
          fi
          
          # Download the zip file
          echo "Downloading Specification Folder Zip..."
          curl -L -o spec_folder.zip "$SPEC_FOLDER_URL"
          
          # Unzip and list contents
          echo "Extracting Specification Folder..."
          mkdir -p spec_folder
          unzip -q spec_folder.zip -d spec_folder
          echo "Contents of Specification Folder:"
          ls -R spec_folder
          echo "--------------------"
          echo "Favicon Image: $FAVICON_IMAGE"
          echo "Primary Color Hex Code: ${PRIMARY_COLOR:-#0c7ff2}"
          echo "Secondary Color Hex Code: ${SECONDARY_COLOR:-$PRIMARY_COLOR}"
          echo "Link Color Hex Code: ${LINK_COLOR:-#00C7D4}"
